* Use-Package Updates
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
(use-package auto-compile
:config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC
* UI
** All The Icons
#+BEGIN_SRC emacs-lisp

  (use-package all-the-icons
  :hook (all-the-icons-install-fonts))
  
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp

   (use-package base16-theme
   :config
   (load-theme 'base16-gruvbox-dark-hard t))

#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp

  (setq default-frame-alist
    '((width . 80)
      (font . "Menlo-18")))
		
#+END_SRC

* Snippets

Expand Curly Braces in Programming Modes

#+BEGIN_SRC emacs-lisp
   (defun my/expand-curlies ()
      (interactive)
		(insert "{")
		(insert "}")
   	(backward-char)
   	(newline)
   	(newline)
   	(previous-line)
   )
   (defun my/keys-expand-curlies ()
      (local-set-key (kbd "{}") #'my/expand-curlies))
		
   (add-hook 'prog-mode-hook #'my/keys-expand-curlies)
#+END_SRC

* Custom Emacs Settings
** Annoying Alter Sound (Bell) 
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
** Clipboard
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t 
      x-select-enable-primary t)
#+END_SRC
** Org Latex Renderer
#+BEGIN_SRC emacs-lisp

   (setq org-latex-create-formula-image-program 'dvisvgm)

#+END_SRC

** Auto-Save Directory
#+BEGIN_SRC emacs-lisp

  ;; (mkdir "~/.emacs-saves/")
  (setq auto-save-file-name-transforms
   `(
      (".*" "~/.emacs-saves/" t)
    )
  )

#+END_SRC
** Default Python Version
#+BEGIN_SRC emacs-lisp

  (setq python-shell-interpreter "python3")

#+END_SRC
** Paragraph Wrap Limit 80 Column
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 79)
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** Do Not Wrap Lines
#+BEGIN_SRC emacs-lisp
  (toggle-truncate-lines)
#+END_SRC

** Dired

Less detail by default

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
#+END_SRC

Hide dotfiles by default, but toggle their visibility with =.=.

#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :config
    (dired-hide-dotfiles-mode)
    (define-key dired-mode-map "." 'dired-hide-dotfiles-mode))
#+END_SRC

Always copy directories recursively instead of asking every time.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-copies 'always)
#+END_SRC

Ask before recursively /deleting/ a directory, though.

#+BEGIN_SRC emacs-lisp
  (setq dired-recursive-deletes 'top)
#+END_SRC

** Switch and Rebalance Windows When Splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+BEGIN_SRC emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

** Custom Variables

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" "/Users/ihsan/.local/bin:/usr/local/bin:/usr/local/sbin:/bin:/usr/bin:/usr/sbin:/sbin")
  (setq shell-file-name (executable-find "/usr/local/bin/zsh"))
  (setq frame-resize-pixelwise t)
  (set-frame-position (selected-frame) 960 0)
  (setq vc-follow-symlinks nil)
  (setq-default tab-width 3)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq backup-directory-alist `(("." . "~/.emacs.d/.backup")))

  (setq inhibit-startup-screen t)
  (setq initial-scratch-message "")
  (defun display-startup-echo-area-message () (message ""))
  (setq c-set-style 'awk)
  (setq-default cursor-type 'bar)
  (set-window-scroll-bars (minibuffer-window) nil nil)

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  (setq scroll-margin 1
    scroll-conservatively 0
    scroll-up-aggressively 0.01
    scroll-down-aggressively 0.01)
  (setq-default scroll-up-aggressively 0.01
    scroll-down-aggressively 0.01)
#+END_SRC

** Emacs Customization
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (if (display-graphic-p)
	 (progn
		(tool-bar-mode -1)
		(scroll-bar-mode -1)))
  (show-paren-mode 1)
  (save-place-mode 1)
  (display-time-mode 1)
  (global-linum-mode 0)
  (blink-cursor-mode 0)
  (column-number-mode 1)
  (add-hook 'prog-mode-hook #'hs-minor-mode)
  (set-window-scroll-bars (minibuffer-window) nil nil)
  ;; (set-frame-parameter (selected-frame) 'internal-border-width 5) ;; innr gap
#+END_SRC

** Kill Always Current Buffer
#+BEGIN_SRC emacs-lisp
  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

** Always Kill the Current Buffer =C-x k=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+END_SRC

** Compilation in Same Window
#+BEGIN_SRC emacs-lisp
  ;; Always open compilation buffers in the same window.
  (add-to-list 'display-buffer-alist
               (cons (lambda (buffer alist)
                       (with-current-buffer buffer
                         (eq major-mode 'compilation-mode)))
                     (cons 'display-buffer-reuse-major-mode-window
                           '((inhibit-same-window . nil)
                             (reusable-frames . visible)
                             (inhibit-switch-frame . nil)))))

  (defun display-buffer-reuse-major-mode-window (buffer alist)
    (let* ((alist-entry (assq 'reusable-frames alist))
           (frames (cond (alist-entry (cdr alist-entry))
                         ((if (eq pop-up-frames 'graphic-only)
                              (display-graphic-p)
                            pop-up-frames)
                          0)
                         (display-buffer-reuse-frames 0)
                         (t (last-nonminibuffer-frame))))
           (window (let ((mode (with-current-buffer buffer major-mode)))
                     (if (and (eq mode (with-current-buffer (window-buffer)
                                         major-mode))
                              (not (cdr (assq 'inhibit-same-window alist))))
                         (selected-window)
                       (catch 'window
                         (walk-windows
                          (lambda (w)
                            (and (window-live-p w)
                                 (eq mode (with-current-buffer (window-buffer w)
                                            major-mode))
                                 (not (eq w (selected-window)))
                                 (throw 'window w)))
                          'nomini frames))))))
      (when (window-live-p window)
        (prog1 (window--display-buffer buffer window 'reuse alist)
          (unless (cdr (assq 'inhibit-switch-frame alist))
            (window--maybe-raise-frame (window-frame window)))))))
#+END_SRC

** Compilation Output One Message
#+BEGIN_SRC emacs-lisp
  (defun notify-compilation-result(buffer msg)
  "Notify that the compilation is finished,
  close the *compilation* buffer if the compilation is successful,
  and set the focus back to Emacs frame"
    (if (string-match "^finished" msg)
      (progn
       (delete-windows-on buffer)
       (message "Compilation Successful"))
      (message "Compilation Failed")))
  (add-to-list 'compilation-finish-functions
  	     'notify-compilation-result)
#+END_SRC

* Packages 
** Company
#+BEGIN_SRC emacs-lisp

   (use-package company
   :config
	(add-hook 'after-init-hook 'global-company-mode))

   (defun text-mode-hook-setup ()
      (make-local-variable 'company-backends)
      (add-to-list 'company-backends 'company-ispell)
      (add-hook 'text-mode-hook 'text-mode-hook-setup))
   
   (defun toggle-company-ispell ()
      (interactive)
      (cond
       ((memq 'company-ispell company-backends)
         (setq company-backends (delete 'company-ispell company-backends))
         (message "company-ispell disabled"))
       (t
         (add-to-list 'company-backends 'company-ispell)
         (message "company-ispell enabled!"))))
			
   (add-hook 'org-mode-hook 'add-to-list 'company-backends 'company-ispell)
		
#+END_SRC
** Writeroom
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
  :config
    (global-set-key (kbd "M-g")
	    (progn
        'global-writeroom-mode
	      'writeroom-mode
			)
    )
  )
#+END_SRC

** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
  :config
    (evil-mode 1)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
  :config
    (global-evil-surround-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+END_SRC

Persistent highlight for regex searches (lock)

#+BEGIN_SRC emacs-lisp
  (defun highlight-remove-all ()
    (interactive)
    (hi-lock-mode -1)
    (hi-lock-mode 1))

  (defun search-highlight-persist ()
    (highlight-regexp (car-safe (if isearch-regexp
                                    regexp-search-ring
                                  search-ring)) (facep 'hi-yellow)))

  (defadvice isearch-exit (after isearch-hl-persist activate)
    (highlight-remove-all)
    (search-highlight-persist))

  (defadvice evil-search-incrementally (after evil-search-hl-persist activate)
    (highlight-remove-all)
    (search-highlight-persist))

  (define-key evil-normal-state-map (kbd "<escape>")
    'highlight-remove-all)
#+END_SRC

** Neo Tree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
  :config
    (require 'neotree)
    (global-set-key (kbd "M-3") 'neotree-toggle)
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (add-hook 'neotree-mode-hook
      (lambda ()
        (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
        (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
        (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
        (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
        (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
        (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
        (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
        (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
        (define-key evil-normal-state-local-map (kbd ".") 'neotree-hidden-file-toggle))))
#+END_SRC

** Diff Highlight
Use the =diff-hl= package to highlight changed-and-uncommitted lines when
programming.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
  :config
    (global-undo-tree-mode 1))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
  :config
    (which-key-mode))
#+END_SRC

** Multi Term
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
  :config
    (global-set-key (kbd "C-c t") 'multi-term))
#+END_SRC

Disable evil mode in term-mode

Paste in term-mode, Other window shortcut

#+BEGIN_SRC emacs-lisp
  (defun hrs/term-paste (&optional string)
    (interactive)
    (process-send-string
     (get-buffer-process (current-buffer))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'hrs/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))
#+END_SRC

** Org
#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "¬");;⤵
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Hit =M-n= to quickly open up my notes.

#+BEGIN_SRC emacs-lisp
  (setq org-notes-file "~/Dropbox/Document/Notes.org")
  (global-set-key (kbd "M-n") (lambda()
    (interactive)
    (find-file org-notes-file)))
#+END_SRC

Don't ask before evaluating code blocks.

#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Counsel, swiper, flx smex, ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
  :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)
  :config
    (use-package flx)
    (use-package smex)

  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
    '((swiper . ivy--regex-plus)
    (t . ivy--regex-fuzzy))))
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
  :commands
    (markdown-mode gfm-mode)
  :mode
    (("README\\.md\\'" . gfm-mode)
    ("\\.md\\'" . markdown-mode)
    ("\\.markdown\\'" . markdown-mode))
  :init
    (setq markdown-command "multimarkdown"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  '(markdown-hide-urls t)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
  :bind
    ("C-x g" . magit-status)

  :config
    (use-package evil-magit)
    (use-package with-editor)
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)

    (with-eval-after-load 'magit-remote
      (magit-define-popup-action 'magit-push-popup ?P
      'magit-push-implicity--desc
      'magit-push-implicty ?p t))
    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+END_SRC

** Csv mode
#+BEGIN_SRC emacs-lisp
  (use-package csv)
#+END_SRC

** Js2 mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
  :mode
    ("\\.js\\'" . js2-mode))
#+END_SRC

** Config General
#+BEGIN_SRC emacs-lisp
  (use-package config-general-mode
  :mode
    (("rc\\'" . config-general-mode)
    ("\\.conf\\'" . config-general-mode)))
#+END_SRC

* Custom Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-r") 'counsel-recentf)
  (global-set-key (kbd "M-k") 'kill-this-buffer)
  (global-set-key (kbd "M-0") 'delete-window)
  (global-set-key (kbd "M-c") 'recompile)
  (global-set-key (kbd "C-u") 'evil-scroll-up)
  (define-key evil-normal-state-map (kbd "SPC") 'evil-toggle-fold)
#+END_SRC

* Org-Babel Languages
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
    '(
      (shell . t)
      (python . t)
    )
  )
#+END_SRC

* =FORSAKEN=
** Appearance
#+BEGIN_SRC emacs-lisp
  ;; (setq-default mode-line-format nil)
  ;; (setq mode-line-format nil)
#+END_SRC
** Theme Fix
#+BEGIN_SRC emacs-lisp
  ;; (if (not (display-graphic-p)) ;; if session is in a terminal then correct colors.
  ;; 	(progn
  ;; 		(set-background-color "black")
  ;; 		(set-foreground-color "white")
  ;; 	)
  ;; )
#+END_SRC

** Csound
#+BEGIN_SRC emacs-lisp
  ;; (use-package csound-mode
  ;;   :mode (("\\.csd\\'" . csound-mode)
  ;;   	 ("\\.orc\\'" . csound-mode)
  ;;   	 ("\\.sco\\'" . csound-mode)
  ;;   	 ("\\.udo\\'" . csound-mode))
  ;;   :load-path "packages/csound-mode/")
#+END_SRC

** Open Notes.org on startup
#+BEGIN_SRC emacs-lisp
  ;; (setq initial-buffer-choice
  ;;   "~/Dropbox/Document/Notes.org")
#+END_SRC

** Go mode
#+BEGIN_SRC emacs-lisp
  ;; (use-package go-mode)
#+END_SRC

** Dashboard
#+BEGIN_SRC emacs-lisp
  ;; (use-package dashboard
  ;; :config
  ;;   (setq dashboard-center-content t)
  ;;   (setq dashboard-set-navigator t)
  ;;   (setq dashboard-set-heading-icons t)
  ;;   (setq dashboard-items '((recents  . 5) ))
  ;;   (setq dashboard-set-file-icons t)
  ;;   (dashboard-setup-startup-hook)
  ;;   (evil-set-initial-state 'dashboard-mode 'emacs))
#+END_SRC

** Company{,-jedi}

Side note: Check [[https://archive.zhimingwang.org/blog/2015-04-26-using-python-3-with-emacs-jedi.html][this page]] for jedi with python3 issues:

#+BEGIN_SRC emacs-lisp
  ;; (use-package company
  ;; :config
  ;;   (defun company-semantic-setup ()
  ;;   "Configure company-backends for company-semantic and company-yasnippet."
  ;;   (delete 'company-irony company-backends)
  ;;   (push '(company-semantic :with company-yasnippet) company-backends))
  ;;   (add-hook 'after-init-hook 'global-company-mode)
  ;;   (setq company-backends (delete 'company-semantic company-backends))

  ;;   (require 'cc-mode)
  ;;   (define-key c-mode-map  [(tab)] 'company-complete)
  ;;   (define-key c++-mode-map  [(tab)] 'company-complete))

  ;; (use-package company-jedi
  ;;   :config
  ;;   (setq jedi:environment-root "jedi")
  ;;   (defun company-jedi-setup ()
  ;;   	(add-to-list 'company-backends 'company-jedi))
  ;;   (add-hook 'python-mode-hook 'jedi:install-server)
  ;;   (add-hook 'python-mode-hook 'company-jedi-setup)

  ;;   (setq jedi:setup-keys t)
  ;;   (setq jedi:complete-on-dot t)
  ;;   (add-hook 'python-mode-hook 'jedi:setup))
#+END_SRC

** Helpful
#+BEGIN_SRC emacs-lisp
  ;; (use-package helpful
  ;; :config
  ;;   (global-set-key (kbd "C-h f") #'helpful-callable)
  ;;   (global-set-key (kbd "C-h v") #'helpful-variable)
  ;;   (global-set-key (kbd "C-h k") #'helpful-key)
  ;;   (evil-define-key 'normal helpful-mode-map (kbd "q") 'quit-window))
#+END_SRC

** Approximate-Colors
#+BEGIN_SRC emacs-lisp
  ;; (use-package color-theme-approximate
  ;;   :config
  ;;   (color-theme-approximate-on))
#+END_SRC

** Org Title Sizes in Solarized Theme
#+BEGIN_SRC emacs-lisp
  ;; (setq solarized-scale-org-headlines nil)
#+END_SRC

** Ledger
#+BEGIN_SRC emacs-lisp
  ;; (use-package ledger-mode
  ;; :mode "\\.ledger$"
  ;; :config
  ;;   (setq ledger-binary-path "/usr/local/bin/ledger"))
#+END_SRC

** Minions
#+BEGIN_SRC emacs-lisp
   ;; (use-package minions
   ;;   :config
   ;;   (setq minions-mode-line-lighter ""
   ;;         minions-mode-line-delimiters '("" . ""))
   ;;   (minions-mode 1))
#+END_SRC

** Flycheck
 #+BEGIN_SRC emacs-lisp
   ;; (use-package flycheck)
 #+END_SRC

** Mode-Line
#+BEGIN_SRC emacs-lisp
  ;; (use-package fancy-battery
  ;; :config
  ;;   (fancy-battery-mode 1))

  ;; (use-package doom-modeline
  ;; :hook (after-init . doom-modeline-mode)
  ;; :config
  ;;  (setq doom-modeline-height 5))
#+END_SRC

** Enable Spell-Checking In The Usual Places
#+BEGIN_SRC emacs-lisp
  ;; (use-package flyspell
  ;;   :config
  ;;   (add-hook 'text-mode-hook 'turn-on-auto-fill)
  ;;   (add-hook 'gfm-mode-hook 'flyspell-mode)
  ;;   (add-hook 'org-mode-hook 'flyspell-mode)
  ;;   (add-hook 'latex-mode-hook 'flyspell-mode)

  ;;   (add-hook 'git-commit-mode-hook 'flyspell-mode)
  ;;   (add-hook 'mu4e-compose-mode-hook 'flyspell-mode))
#+END_SRC

** Dired

Open media with the appropriate programs.

#+BEGIN_SRC emacs-lisp
  ;; (use-package dired-open
  ;;   :config
  ;;   (setq dired-open-extensions
  ;;         '(("pdf" . "mupdf")
  ;;           ("xlsx" . "gnumeric")
  ;;           ("mkv" . "mpv")
  ;;           ("mp3" . "mpv")
  ;;           ("mp4" . "mpv")
  ;;           ("avi" . "mpv"))))
#+END_SRC

** Pdf-Tools
#+BEGIN_SRC emacs-lisp
  ;; (use-package pdf-tools
  ;; :config
  ;;   (pdf-tools-install)
  ;;   (pdf-loader-install)
  ;;   (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode))
#+END_SRC

** Subword (for camel case word jumping)
#+BEGIN_SRC emacs-lisp
  ;; (use-package subword
  ;;   :config (global-subword-mode 1))
#+END_SRC

** LaTeX Compile After Save
#+BEGIN_SRC emacs-lisp
  ;; (add-hook 'after-save-hook
  ;;   (lambda ()
  ;;     (if (eq major-mode 'latex-mode)
  ;;       (recompile)
  ;;       (evil-scroll-line-to-center))))
#+END_SRC

** Ranger
#+BEGIN_SRC emacs-lisp
  ;; (use-package ranger
  ;; :config
  ;;   (ranger-override-dired-mode t))
#+END_SRC

** Fill-Column-Indicator
#+BEGIN_SRC emacs-lisp
  ;; (use-package fill-column-indicator
  ;; :config
  ;;   (add-hook 'prog-mode-hook #'fci-mode)
  ;;   (setq fci-rule-column 79)
  ;;   (setq fci-rule-color "gray22"))
#+END_SRC

** Hide-Show Folding Blocks
#+BEGIN_SRC emacs-lisp
  ;; (defun fold-def-all ()
  ;;   (hs-minor-mode 1)
  ;;   (interactive)
  ;;   (goto-char 1)
  ;;   (while (re-search-forward "^\s*def\s" nil t)
  ;;     (hs-hide-block)))
  ;;
  ;; (defun folding-blocks ()
  ;;   (hs-minor-mode 1)
  ;;   (local-set-key (kbd "C--") 'hs-hide-block)
  ;;   (local-set-key (kbd "C-=") 'hs-show-block))
  ;;
  ;; (add-hook 'python-mode-hook 'folding-blocks)
  ;; (add-hook 'js-mode-hook 'folding-blocks)
#+END_SRC
